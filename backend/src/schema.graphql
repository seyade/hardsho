type User {
	id: ID!
	username: String!
	email: String!
	profile: String
	name: String
	role: String!
	appTenure: String
	skills: [String]!
	clients: [Client]!
	createdAt: String!
	updatedAt: String!
}

type Client {
	id: ID!
	userId: ID!
	name: String!
	description: String
	projects: [Project]!
	createdAt: String!
	updatedAt: String!
}

type Project {
	id: ID!
	clientId: ID!
	name: String!
	date: String!
	description: String!
	crafts: [Craft]!
	createdAt: String!
	updatedAt: String!
}

type Craft {
	id: ID!
	projectId: ID!
	description: String!
	htmlCode: String!
	cssCode: String!
	jsCode: String!
	createdAt: String!
	updatedAt: String!
}

type Query {
	clients(userId: ID!): [Client]
	client(id: ID): Client

	projects(clientId: ID!): [Project]
	project(id: ID!): Project

	crafts(projectId: ID!): [Craft]
	craft(id: ID): Craft

	user(id: ID!): User
	users: [User]
}

type Mutation {
	createUser(input: UserInput): User!
	updateUser(id: ID!, input: UserInput!): User!
	deleteUser(id: ID!): User!

	createClient(userid: ID!, input: ClientInput): Client!
	updateClient(id: ID!, input: ClientInput!): Client!
	deleteClient(id: ID!): Client!

	createProject(clientId: ID!, input: ProjectInput): Project
	updateProject(id: ID!, input: ProjectInput): Project
	deleteProject(id: ID!): Project

	createCraft(projectId: ID!, input: CraftInput): Craft!
	updateCraft(id: ID!, input: CraftInput): Craft!
	deleteCraft(id: ID): Craft!
}

input ClientInput {
	name: String!
	description: String
	projects: [ProjectInput]
}

input ProjectInput {
	name: String
	description: String
	pdate: String
	crafts: [CraftInput]
}

input CraftInput {
	description: String
	htmlCode: String
	cssCode: String
	jsCode: String
	createdAt: String
	modifiedAt: String
}

input UserInput {
	username: String!
	email: String!
	profile: String
	name: String
	role: String!
	skills: [String]
}
